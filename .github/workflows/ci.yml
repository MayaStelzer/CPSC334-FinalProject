
name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Create build directory
      run: mkdir -p build
      
    - name: Configure CMake
      run: cmake -S . -B build
      
    - name: Build
      run: cmake --build build

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: compiled-binaries
        path: build/PA3

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install clang-format
      run: sudo apt-get install -y clang-format
      
    - name: Run clang-format
      run: |
        find . -type f -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file -i
        git diff --exit-code || (echo "Code formatting issues found!" && exit 1)

  package:
    runs-on: ubuntu-latest
    needs: [build, lint]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: sudo apt-get install -y cmake build-essential

    - name: Create build directory
      run: mkdir -p build
      
    - name: Configure CMake with packaging
      run: cmake -S . -B build -DCPACK_GENERATOR="DEB"
      
    - name: Build package
      run: |
        cmake --build build
        cd build
        cpack
    
    - name: Upload DEB package
      uses: actions/upload-artifact@v3
      with:
        name: pa3-package
        path: build/*.deb

  deploy:
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download package
      uses: actions/download-artifact@v3
      with:
        name: pa3-package
        
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -t rsa ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
    - name: Deploy to VM
      run: |
        scp *.deb ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }}:~/
        ssh ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }} "sudo dpkg -i ~/*.deb"